function [controlFailureTrack1, controlFailureTrack2] = sequentialDoubleBoundaryRunA_concDrugSwitch_withBOption(folderName, fileName, pStruct, drugConc1, drugConc2)
%file and folderName save the [ANYTHING ELSE?] and the figures generated in
%the filepath created
%tic
close all;

%GENERAL RULES
    %use camelcase, not underscores for parameter names EXCEPTING things
    %that would have otherwise been sub or superscripted or need to split
    %apart chunks of a name
    %dear god comment you blessed idiot

    runType = 'sequentialDoubleBoundaryControlShapeA_concDrugSwitch';
    %sequential double bound with A as the first boundary, B as 0 -> second
    %boundary, with switches between different phases based on the
    %concentration of the boundary drug primarily

    %parameter definition
    %base equation build + instantiation of structure
        %structures now built outside of main run file (this one) and fed
        %in as full structures to this file in order to set up multi sim
        %runs easier

    %population + time parameters
    p = pStruct;
    initCond = [p.naivePopIC, p.mutAPopIC, p.mutBPopIC, p.doubleMutPopIC, p.totalPopIC];

    %solving/graphing system given parameters
    tSPAN = [1 p.cellTime]; %timespan the ODE is being solved over
    %options = odeset('RelTol', 1e-4, 'NonNegative', [1 2 3 4 5]);

    Store.t=[];
    Store.x=[];
    t=tSPAN(1);
    x=initCond;
    concentrationA = [];
    concentrationB = [];
    initialDrugAVal = ((1 - p.kappa_threshold./p.kappa).*(p.lambda_n .* p.naivePopIC + p.lambda_m .* p.mutAPopIC + p.lambda_s .* p.mutBPopIC + p.lambda_d .* p.doubleMutPopIC)- 0.*p.alphaB.*(p.naivePopIC + p.mutBPopIC))./(p.alphaA .* (p.naivePopIC + p.mutAPopIC));
    initialDrugBVal = ((1 - p.kappa_threshold./p.kappa).*(p.lambda_n .* p.naivePopIC + p.lambda_m .* p.mutAPopIC + p.lambda_s .* p.mutBPopIC + p.lambda_d .* p.doubleMutPopIC)- 0.*p.alphaA.*(p.naivePopIC + p.mutAPopIC))./(p.alphaB .* (p.naivePopIC + p.mutBPopIC));
    
    if initialDrugAVal < p.uMaxA
        if t(end) < tSPAN(end)
        %phase 1 - control B at 0 and control A at threshold until
        %time-based switch
        options = odeset('Events', @(t,x) eventGoalA_BSub(t, x, p, drugConc1, 0),'RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
        %sprintf("phase 1 start")
        [t, x] = ode45(@(t, x) controlACalcThreshold_controlBZero(t, x, p), [t(end) tSPAN(end)], x(end,:), options);
        Store.t=[Store.t ;t(2:end)];
        Store.x=[Store.x; x(2:end,:)];
        lengthVal = length(Store.t);
        concentrationAHold = ((1 - p.kappa_threshold./p.kappa).*(p.lambda_n .* Store.x(:,1) + p.lambda_m .* Store.x(:,2) + p.lambda_s .* Store.x(:,3) + p.lambda_d .* Store.x(:,4))- 0.*p.alphaB.*(Store.x(:,1) + Store.x(:,3)))./(p.alphaA .* (Store.x(:,1) + Store.x(:,2)));
        concentrationA = [concentrationA; concentrationAHold'];
        concentrationBHold = zeros(1, lengthVal);
        concentrationB = [concentrationB; concentrationBHold];
        %sprintf("phase 1 done")
            if t(end) < tSPAN(end)
                %phase 2 - control B at threshold and control A at max until
                %time-based switch
                %sprintf("phase 2 start")
                options2 = odeset('Events', @(t, x) eventGoalB_ASub(t, x, p, drugConc2, p.uMaxA), 'RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
                [t, x] = ode45(@(t, x) controlAMax_controlBCalcThreshold(t, x, p), [t(end) tSPAN(end)], x(end,:), options2);
                xHold2 = x(2:end,:);
                Store.t=[Store.t ;t(2:end)];
                Store.x=[Store.x; x(2:end,:)];
                lengthVal = length(t) - 1;
                concentrationAHold=p.uMaxA*ones(1, lengthVal);
                concentrationA = [concentrationA, concentrationAHold];
                %CONCENTRATIONBHOLD IS GENERATING A SQUARE MATRIX FOR SOME
                %REASON
                concentrationBHold2 = (((p.lambda_n .* xHold2(:,1) + p.lambda_m .* xHold2(:,2) + p.lambda_s .* xHold2(:,3) + p.lambda_d .* xHold2(:,4)) .* (1-(p.kappa_threshold./p.kappa))) - p.alphaA.*p.uMaxA.*(xHold2(:,1)+xHold2(:,2)))./(p.alphaB .* (xHold2(:,1) + xHold2(:,3)));
                concentrationB = [concentrationB, concentrationBHold2'];
                %sprintf("phase 2 done")
                if t(end) < tSPAN(end)
                    %phase 3 - control B and control A at max until end of
                    %simulation
                    %sprintf("phase 3 start")
                    options3 = odeset('RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
                    [t, x] = ode45(@(t, x) controlAMax_controlBMax(t, x, p), [t(end) tSPAN(end)], x(end,:), options3);
                    Store.t=[Store.t ;t(2:end)];
                    Store.x=[Store.x; x(2:end,:)];
                    lengthVal3 = length(t) - 1;
                    concentrationAHold3=p.uMaxA.*ones(1,lengthVal3);
                    concentrationA = [concentrationA, concentrationAHold3];
                    concentrationBHold3=p.uMaxB*ones(1,lengthVal3);
                    concentrationB = [concentrationB, concentrationBHold3];
                    %sprintf("phase 3 done")
                end
            end
        end


    elseif initialDrugBVal < p.uMaxB && initialDrugAVal >= p.uMaxA
        if t(end) < tSPAN(end)
        %phase 1 - control B at 0 and control A at threshold until
        %time-based switch
        options = odeset('Events', @(t,x) eventGoalB_ASub(t, x, p, drugConc2, 0),'RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
        %sprintf("phase 1 start")
        [t, x] = ode45(@(t, x) controlAZero_controlBCalcThreshold(t, x, p), [t(end) tSPAN(end)], x(end,:), options);
        Store.t=[Store.t ;t(2:end)];
        Store.x=[Store.x; x(2:end,:)];
        lengthVal = length(Store.t);
        concentrationAHold = zeros(1, lengthVal);
        concentrationA = [concentrationA; concentrationAHold];
        concentrationBHold = ((1 - p.kappa_threshold./p.kappa).*(p.lambda_n .* Store.x(:, 1) + p.lambda_m .* Store.x(:, 2) + p.lambda_s .* Store.x(:, 3) + p.lambda_d .* Store.x(:, 4))- 0.*p.alphaA.*(Store.x(:, 1) + Store.x(:, 2)))./(p.alphaB .* (Store.x(:, 1) + Store.x(:, 3)));
        concentrationB = [concentrationB; concentrationBHold'];
            if t(end) < tSPAN(end)
                %phase 2 - control B at threshold and control A at max until
                %time-based switch
                %sprintf("phase 2 start")
                options2 = odeset('Events', @(t, x) eventGoalA_BSub(t, x, p, drugConc1, p.uMaxB), 'RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
                [t, x] = ode45(@(t, x) controlACalcThreshold_controlBMax(t, x, p), [t(end) tSPAN(end)], x(end,:), options2);
                xHold2 = x(2:end,:);
                Store.t=[Store.t ;t(2:end)];
                Store.x=[Store.x; x(2:end,:)];
                lengthVal = length(t) - 1;
                concentrationAHold=((1 - p.kappa_threshold./p.kappa).*(p.lambda_n .* xHold2(:,1) + p.lambda_m .* xHold2(:,2) + p.lambda_s .* xHold2(:,3) + p.lambda_d .* xHold2(:,4))- p.uMaxB.*p.alphaB.*(xHold2(:,1) + xHold2(:,3)))./(p.alphaA .* (xHold2(:,1) + xHold2(:,2)));
                concentrationA = [concentrationA, concentrationAHold'];
                %CONCENTRATIONBHOLD IS GENERATING A SQUARE MATRIX FOR SOME
                %REASON
                concentrationBHold=p.uMaxB*ones(1, lengthVal);
                concentrationB = [concentrationB, concentrationBHold];
                %sprintf("phase 2 done")
                if t(end) < tSPAN(end)
                    %phase 3 - control B and control A at max until end of
                    %simulation
                    %sprintf("phase 3 start")
                    options3 = odeset('RelTol', 1e-4, 'NonNegative', [1 2 3 4]);
                    [t, x] = ode45(@(t, x) controlAMax_controlBMax(t, x, p), [t(end) tSPAN(end)], x(end,:), options3);
                    Store.t=[Store.t ;t(2:end)];
                    Store.x=[Store.x; x(2:end,:)];
                    lengthVal3 = length(t) - 1;
                    concentrationAHold3=p.uMaxA.*ones(1,lengthVal3);
                    concentrationA = [concentrationA, concentrationAHold3];
                    concentrationBHold3=p.uMaxB*ones(1,lengthVal3);
                    concentrationB = [concentrationB, concentrationBHold3];
                    %sprintf("phase 3 done")
                end
            end
        end
    else
    end
end